<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="mobile-web-app-capable" content="yes">
    <title><%= title %></title>
    
    <style>
        #timer {
    font-size: 108px;
    width: 270px;
    height: 150px;
}

body {
    width: 345px;
    height: 450px;
    background-color: #a8bafa;
}


.time {
    height: 50px;
    margin: 10px 45px;
    color: white;
    border: none;
    background: transparent;
    font-size: 20px;
    
}


span {
font-size: 41px;
padding: 0px;
}

.operation {
width: 100%;
border-collapse: collapse;
}

.operation_btn {
font-size: 20px;
width: 100%;
height: 100%;
background: linear-gradient(to bottom right, #A4FBEB, #8cacff);
}

.cal {

height: 80px;
border: 1px solid;
padding: 0px;
}

.slash {
color: grey;
}

#time {
margin-left: 5px;
}
    </style>
</head>
<body>
    <div class="button-wrapper">
      
      <audio id="btn_audio">
        <source src= "https://cdn.glitch.global/d4944018-f02f-4597-ba1a-621cfec14b1e/%E6%B1%BA%E5%AE%9A%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E6%8A%BC%E3%81%9951.mp3?v=1719506951030">
      </audio>
      
      <audio id="btn_audio2">
        <source src= "https://cdn.glitch.global/d4944018-f02f-4597-ba1a-621cfec14b1e/%E6%B1%BA%E5%AE%9A%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E6%8A%BC%E3%81%9952.mp3?v=1719538595107">
      </audio>
      
      <audio id="btn_audio3">
        <source src= "https://cdn.glitch.global/d4944018-f02f-4597-ba1a-621cfec14b1e/%E6%B1%BA%E5%AE%9A%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E6%8A%BC%E3%81%9953.mp3?v=1719559722260">
      </audio>
        <table>
          <tr>
            
            <td><button class="time" id="1minute--" onclick="audio()">- 1:00</button></td>
            <td><button class="time" id="1minute++" onclick="audio()">+ 1:00</button></td>
          </tr>
          <tr>
            <td><button class="time" id="5minute--" onclick="audio2()">- 5:00</button></td>
            <td><button class="time" id="5minute++" onclick="audio2()">+ 5:00</button></td>
          </tr>
          <tr>
            <td><button class="time" id="10minute--" onclick="audio3()">- 10:00</button></td>
            <td><button class="time" id="10minute++" onclick="audio3()">+ 10:00</button></td>
          </tr>
        </table>
      
      </div>
        
      <div id="timer">0:00:00</div>
        
        <span id="time"></span>
        <span class="slash">-</span>
        <span id="end"></span>
      
        <table class="operation">
          <tr class="cal">
            <td class="cal"><button class="operation_btn" id="startPauseButton" onclick="timerStart()">スタート</button></td>
            <td class="cal"><button class="operation_btn" id="resetButton" onclick="reset()">リセット</button></td>
          </tr>
          <tr>
            <td class="cal"><button class="operation_btn" onclick="location.href='/add'">予約</button></td>
            <td class="cal"><button class="operation_btn" onclick="location.href='/view'">予約一覧</button></td>
          </tr>
      </table>
      
      
     <table border="2" style="border-collapse:collapse;">
   <% for (let i in data) { %>
      <tr>
        <td rowspan="2" class="cel"><%= data[i].id %></td>
        <td colspan="2" class="cel">予約:<br><% const timeObject = new Date(data[i].time); %>
            <%= timeObject.toLocaleString('ja-JP',{hour: '2-digit', minute: '2-digit'}) %></td>
        <td colspan="2" class="cel">開始:<br><%= data[i].startTime.toLocaleString('ja-JP', { hour: '2-digit', minute: '2-digit' }) %></td>
        
        
        <td><a href="javascript:del(<%= data[i].id %>)">[del]</a></td>
     </tr>
     <tr>
        <td class="cel"><%= data[i].number %>本</td>
        <td class="cel"><%= data[i].number / 10 %>分</td>
        <td colspan="2"><%= data[i].name %></td>
        <td colspan="2"><%= data[i].checked %></td>
        
     </tr>
    <% } %>
      
  </table>
  <button onclick="location.href='/customer'">
        customer
      </button>
        
<script>
  const socket = new WebSocket(
  (location.protocol === 'https:' ? 'wss://' : 'ws://') + location.host
);
console.log(socket);

    socket.addEventListener('open', () => {
      console.log('サーバーに接続しました');
    });

    socket.addEventListener('message', (event) => {
      const message = JSON.parse(event.data);

      if(message.type === 'update') {
        timerValue = message.timerValue;
        console.log(timerValue)
        updateTimer();
      }
    })
  
    let timerValue = getTimerValue();
    let now = new Date();
    let tv = parseInt(timerValue, 10);
    let wait_minutes = new Date(now.getTime() + tv * 1000);

    function updateTimer() {
            const timerElement = document.getElementById('timer');
            let hours = Math.floor(timerValue / 3600);
            let minutes = Math.floor((timerValue % 3600) / 60);
            let seconds = timerValue % 60;
            
            timerElement.textContent = `${String(hours).padStart(1, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
        }

    function saveTimerValue(timerValue) {
        localStorage.setItem('timerValue', timerValue);
    }

    function getTimerValue() {
        return parseInt(localStorage.getItem('timerValue'), 10) || 0;
    }

let startButton = document.getElementById('startPauseButton');
  
let timerInterval;
  

function timerStart() {
  
    
  if (timerInterval) {
    let result = window.confirm('本当にタイマーを一時停止しますか？');
    if(result) {
      clearInterval(timerInterval);
        timerInterval = undefined;
    
        startButton.textContent = 'スタート';
    }
        
      
      
        
    } else {
        
      
        timerInterval = setInterval(function () {
            if (timerValue > 0) {
                timerValue--;
                updateTimer();
                
                
                

            } else {
                clearInterval(timerInterval);
                timerInterval = undefined;
                
            }
        }                        
        , 1000); 
      
      startButton.textContent = '一時停止';  
    }
    
};


  

function showTime(){
            let nowtime =new Date();
            let nowhour = nowtime.getHours();
            let nowminutes = nowtime.getMinutes();
            let nowseconds = nowtime.getSeconds();
          

            document.getElementById('time').textContent = `${String(nowhour).padStart(1, '0')}:${String(nowminutes).padStart(2, '0')}:${String(nowseconds).padStart(2, '0')}`;
        }

        setInterval(showTime,1000);

function waitTime() {
            let now = new Date();
            let tv = parseInt(timerValue, 10);
            wait_minutes = new Date(now.getTime() + tv * 1000);
            let hours = wait_minutes.getHours();
            let minutes = wait_minutes.getMinutes();
            let seconds = wait_minutes.getSeconds();


            document.getElementById('end').textContent = `${String(hours).padStart(1, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
        };

        setInterval(waitTime,1000);


  
  
      
  
  document.getElementById('resetButton').addEventListener('click', function () {
            // タイマーをリセット
            clearInterval(timerInterval);
            timerInterval = undefined;
            updateTimer();
            
            document.getElementById('startPauseButton').textContent = 'スタート';
        });
  
  
function audio() {
    
    document.getElementById('btn_audio').currentTime = 0; //連続クリックに対応
    document.getElementById('btn_audio').play(); //クリックしたら音を再生
}
  
function audio2() {
    
    document.getElementById('btn_audio2').currentTime = 0; //連続クリックに対応
    document.getElementById('btn_audio2').play(); //クリックしたら音を再生
}
  
function audio3() {
    
    document.getElementById('btn_audio3').currentTime = 0; //連続クリックに対応
    document.getElementById('btn_audio3').play(); //クリックしたら音を再生
}



window.onload = function() {
    
    timerStart();
   
  
    

    
        timerValue = getTimerValue() || timerValue;
        
    

}


  let s = 53;
  
document.getElementById('1minute++').addEventListener('click', function(){
            socket.send(JSON.stringify({ action: 'increase', amount: 1 * s }));
            if(startButton.innerText != "スタート") {
              startButton.innerText = "スタート"
            }
        });

document.getElementById('1minute--').addEventListener('click', function(){
            socket.send(JSON.stringify({ action: 'increase', amount: -1 * s }));
        });
      
document.getElementById('5minute++').addEventListener('click', function(){
            socket.send(JSON.stringify({ action: 'increase', amount: 5 * s }));
            if(startButton.innerText != "スタート") {
              startButton.innerText = "スタート"
            }
        });
      
document.getElementById('5minute--').addEventListener('click', function(){
            socket.send(JSON.stringify({ action: 'increase', amount: -5 * s }));
        });
      
document.getElementById('10minute++').addEventListener('click', function(){
            socket.send(JSON.stringify({ action: 'increase', amount: 10 * s }));
            if(startButton.innerText != "スタート") {
              startButton.innerText = "スタート"
            }
            
        });
      
document.getElementById('10minute--').addEventListener('click', function(){
            socket.send(JSON.stringify({ action: 'increase', amount: -10 * s }));
        });

  
  
function addTelOrder() {
      
      <% for (let i = 0; i < data.length ; i++) { %>
        let needMinutes<%- i %> =  <%= data[i].number / 10 + 5 %>;
        let addTime<%- i %> =  {id:<%= data[i].id %>, number:<%= data[i].number / 10 %>, checked:<%= data[i].checked %>};
        let timeToStart<%- i %> = new Date(new Date('<%= data[i].time %>') - needMinutes<%- i %> * 60 * 1000 );
                                                                                             
        if (wait_minutes > timeToStart<%- i %> && addTime<%- i %>.checked === 0) {
        
            socket.send(JSON.stringify({ action: 'increase', amount: addTime<%- i %>.number * s }))                
                                                
            wait_minutes = new Date(now.getTime() + timerValue * 1000 );                                  
            window.location="/checked?id=" + addTime<%- i %>.id;
          }
           
       <% } %>
         
  
      }
       
  function reset() {
    let result = window.confirm('タイマーをリセットしますか？');
    
    if (result) {
      socket.send(JSON.stringify({ action: 'reset'}))
            
            document.getElementById('startPauseButton').textContent = 'スタート';
      
    
      
        } 
        window.location = "/";
    }
  
      


      setInterval(function() {
        addTelOrder();

      }, 1000 * 10);
  
      setInterval(function() {
        saveTimerValue(timerValue)

      }, 1000);
                                                 
      setInterval(function() {
        window.location.reload()
      }, 1000 * 60)
</script>       
</body>
</html>